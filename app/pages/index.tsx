import { WalletDisconnectButton, WalletMultiButton } from '@solana/wallet-adapter-react-ui';
import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';

import { useAnchorWallet } from '@solana/wallet-adapter-react';
import { Program, AnchorProvider, web3, BN } from '@project-serum/anchor';
import { Connection } from '@solana/web3.js';

import idl from '../idl/hello_anchor.json'

const Home: NextPage = () => {

    const network = "http://127.0.0.1:8899";
    const wallet = useAnchorWallet();
    const newAccount = web3.Keypair.generate();

    async function getProvider() {
        if (!wallet) {
            return null;
        }
        const connection = new Connection(network, "processed");
        const provider = new AnchorProvider(
            connection, wallet, { "preflightCommitment": "processed" },
        );
        return provider;
    }

    async function createCounter() {
        const provider = await getProvider()
        if (!provider) {
            throw ("Provider is null.")
        }

        // create the program interface combining the idl, program ID, and provider
        // idl casting is a JSON parsing bug workaround
        const program = new Program(idl as any, idl.metadata.address, provider);
        try {
            await program.methods.create().accounts({
                counterAccount: newAccount.publicKey,
                authority: provider.wallet.publicKey,
                systemProgram: web3.SystemProgram.programId,
            }).signers([newAccount]).rpc();

            const account = await program.account.counterAccount.fetch(newAccount.publicKey);
            console.log('account: ', account);
        } catch (err) {
            console.log("Transaction error: ", err);
        }
    }

    async function updateCounter() {
        const provider = await getProvider()
        if (!provider) {
            throw ("Provider is null.")
        }

        const program = new Program(idl as any, idl.metadata.address, provider);
        try {
            await program.methods.increment().accounts({
                counterAccount: newAccount.publicKey,
            }).rpc();

            const account = await program.account.counterAccount.fetch(newAccount.publicKey);
            console.log('count: ', account.count);
        } catch (err) {
            console.log("Transaction error: ", err);
        }
    }

    async function incrementCounter() {
        const provider = await getProvider()
        if (!provider) {
            throw ("Provider is null.")
        }

        const program = new Program(idl as any, idl.metadata.address, provider);
        try {
            await program.methods.increment().accounts({
                counterAccount: newAccount.publicKey,
            }).rpc();

            const account = await program.account.counterAccount.fetch(newAccount.publicKey);
            console.log('count: ', account.count);
        } catch (err) {
            console.log("Transaction error: ", err);
        }
    }

    async function decrementCounter() {
        const provider = await getProvider()
        if (!provider) {
            throw ("Provider is null.")
        }

        const program = new Program(idl as any, idl.metadata.address, provider);
        try {
            await program.methods.increment().accounts({
                counterAccount: newAccount.publicKey,
            }).rpc();

            const account = await program.account.counterAccount.fetch(newAccount.publicKey);
            console.log('count: ', account.count);
        } catch (err) {
            console.log("Transaction error: ", err);
        }
    }


    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <h1 className={styles.title}>
                    Solana Counter Program
                </h1>

                <div className={styles.walletButtons}>
                    <WalletMultiButton />
                    <WalletDisconnectButton />
                </div>

                <p className={styles.description}>
                    Built with Anchor ⚓️
                </p>

                <div className={styles.grid}>
                    <div className={styles.card} onClick={createCounter}>
                        <h2>Create &rarr;</h2>
                        <p>Create a new counter account.</p>
                    </div>

                    <div className={styles.card} onClick={updateCounter}>
                        <h2>Update &rarr;</h2>
                        <p>Update current counter account.</p>
                    </div>

                    <div className={styles.card} onClick={decrementCounter}>
                        <h2>➖ Decrement</h2>
                    </div>

                    <a className={styles.card} onClick={incrementCounter}>
                        <h2>Increment ➕</h2>
                    </a>
                </div>
            </main>

            <footer className={styles.footer}>
                <a
                    href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    Powered by{' '}
                    <span className={styles.logo}>
                        <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
                    </span>
                </a>
            </footer>
        </div>
    );
};

export default Home;
